#+TITLE: Lisp Linear Algebra --- a linear algebra library for Common Lisp

LLA is a high-level Common Lisp library built on on [[http://www.netlib.org/blas/][BLAS]] and [[http://www.netlib.org/lapack/][LAPACK]], but providing a much more abstract interface with the purpose of freeing the user from low-level concerns and reducing the number of bugs in numerical code.

Documentation is mostly in docstrings at the moment, but I plan to write a decent tutorial at some point.  In the meantime, please look at the unit tests.

* Reporting bugs

Please report bugs using [[https://github.com/tpapp/lla/issues][Github's issue tracker]].

* Libraries

** Dependencies and configuration

LLA needs BLAS and LAPACK shared libraries to work.  When it comes to loading libraries, LLA tries to pick a sensible default for each platform, but in case it fails, you need to tell LLA where the libraries are before loading.

You can do this by putting something like this in your startup script (eg =~/.sbclrc=, the symbol needs to be in the package =cl-user=):

#+BEGIN_SRC lisp
(defvar *lla-configuration* 
  '(:libraries ("/usr/lib/atlas-base/atlas/libblas.so.3gf"
                "/usr/lib/atlas-base/libatlas.so.3gf")))
#+END_SRC


** Debian

On Debian-based distributions, it is very likely that LLA will work out of the box if you just install ATLAS, eg
#+BEGIN_EXAMPLE
apt-get install libatlas3gf-base
#+END_EXAMPLE
However, you may want to build a version optimized for your architecture.

*** Building ATLAS on Debian

Prepare the build (as root):
#+BEGIN_EXAMPLE
apt-get build-dep atlas
apt-get install fakeroot devscripts
cpufreq-set -g performance -c 0   # do this for all CPUs
#+END_EXAMPLE
Then as a regular user,
#+BEGIN_EXAMPLE
apt-get source atlas
cd atlas-[fill in your version here]/
fakeroot debian/rules custom
#+END_EXAMPLE


*** Selecting the right linear algebra library

#+BEGIN_EXAMPLE
update-alternatives --config libblas.so.3gf
update-alternatives --config liblapack.so.3gf
#+END_EXAMPLE


** Intel MKL on Linux

In =/etc/ld.so.conf.d/=, create a file that contains the paths, eg
#+BEGIN_EXAMPLE
/opt/intel/mkl/lib/intel64
/opt/intel/composerxe/lib/intel64
#+END_EXAMPEL

Then the configuration
#+BEGIN_SRC lisp
(defvar *lla-configuration* 
  '("libgomp.so.1" "libiomp5.so" "libmkl_rt" "libpthread.so.0" "libpthread"))
#+END_SRC
should work.








* Things to do (roughly in order of priority)
- finish missing methods; in particular =eigen=
- write optimized SBCL and ECL pinning interfaces
- write documentation (probably w/ [[http://common-lisp.net/project/docudown/][docudown]], decide)
- write more tests (especially randomized ones, develop macros for that)
- make array copying code faster, specializing on array element types, profile and benchmark
